

# This file was *autogenerated* from the file poly.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0x63 = Integer(0x63); _sage_const_0x7C = Integer(0x7C); _sage_const_0x77 = Integer(0x77); _sage_const_0x7B = Integer(0x7B); _sage_const_0xF2 = Integer(0xF2); _sage_const_0x6B = Integer(0x6B); _sage_const_0x6F = Integer(0x6F); _sage_const_0xC5 = Integer(0xC5); _sage_const_0x30 = Integer(0x30); _sage_const_0x01 = Integer(0x01); _sage_const_0x67 = Integer(0x67); _sage_const_0x2B = Integer(0x2B); _sage_const_0xFE = Integer(0xFE); _sage_const_0xD7 = Integer(0xD7); _sage_const_0xAB = Integer(0xAB); _sage_const_0x76 = Integer(0x76); _sage_const_0xCA = Integer(0xCA); _sage_const_0x82 = Integer(0x82); _sage_const_0xC9 = Integer(0xC9); _sage_const_0x7D = Integer(0x7D); _sage_const_0xFA = Integer(0xFA); _sage_const_0x59 = Integer(0x59); _sage_const_0x47 = Integer(0x47); _sage_const_0xF0 = Integer(0xF0); _sage_const_0xAD = Integer(0xAD); _sage_const_0xD4 = Integer(0xD4); _sage_const_0xA2 = Integer(0xA2); _sage_const_0xAF = Integer(0xAF); _sage_const_0x9C = Integer(0x9C); _sage_const_0xA4 = Integer(0xA4); _sage_const_0x72 = Integer(0x72); _sage_const_0xC0 = Integer(0xC0); _sage_const_0xB7 = Integer(0xB7); _sage_const_0xFD = Integer(0xFD); _sage_const_0x93 = Integer(0x93); _sage_const_0x26 = Integer(0x26); _sage_const_0x36 = Integer(0x36); _sage_const_0x3F = Integer(0x3F); _sage_const_0xF7 = Integer(0xF7); _sage_const_0xCC = Integer(0xCC); _sage_const_0x34 = Integer(0x34); _sage_const_0xA5 = Integer(0xA5); _sage_const_0xE5 = Integer(0xE5); _sage_const_0xF1 = Integer(0xF1); _sage_const_0x71 = Integer(0x71); _sage_const_0xD8 = Integer(0xD8); _sage_const_0x31 = Integer(0x31); _sage_const_0x15 = Integer(0x15); _sage_const_0x04 = Integer(0x04); _sage_const_0xC7 = Integer(0xC7); _sage_const_0x23 = Integer(0x23); _sage_const_0xC3 = Integer(0xC3); _sage_const_0x18 = Integer(0x18); _sage_const_0x96 = Integer(0x96); _sage_const_0x05 = Integer(0x05); _sage_const_0x9A = Integer(0x9A); _sage_const_0x07 = Integer(0x07); _sage_const_0x12 = Integer(0x12); _sage_const_0x80 = Integer(0x80); _sage_const_0xE2 = Integer(0xE2); _sage_const_0xEB = Integer(0xEB); _sage_const_0x27 = Integer(0x27); _sage_const_0xB2 = Integer(0xB2); _sage_const_0x75 = Integer(0x75); _sage_const_0x09 = Integer(0x09); _sage_const_0x83 = Integer(0x83); _sage_const_0x2C = Integer(0x2C); _sage_const_0x1A = Integer(0x1A); _sage_const_0x1B = Integer(0x1B); _sage_const_0x6E = Integer(0x6E); _sage_const_0x5A = Integer(0x5A); _sage_const_0xA0 = Integer(0xA0); _sage_const_0x52 = Integer(0x52); _sage_const_0x3B = Integer(0x3B); _sage_const_0xD6 = Integer(0xD6); _sage_const_0xB3 = Integer(0xB3); _sage_const_0x29 = Integer(0x29); _sage_const_0xE3 = Integer(0xE3); _sage_const_0x2F = Integer(0x2F); _sage_const_0x84 = Integer(0x84); _sage_const_0x53 = Integer(0x53); _sage_const_0xD1 = Integer(0xD1); _sage_const_0x00 = Integer(0x00); _sage_const_0xED = Integer(0xED); _sage_const_0x20 = Integer(0x20); _sage_const_0xFC = Integer(0xFC); _sage_const_0xB1 = Integer(0xB1); _sage_const_0x5B = Integer(0x5B); _sage_const_0x6A = Integer(0x6A); _sage_const_0xCB = Integer(0xCB); _sage_const_0xBE = Integer(0xBE); _sage_const_0x39 = Integer(0x39); _sage_const_0x4A = Integer(0x4A); _sage_const_0x4C = Integer(0x4C); _sage_const_0x58 = Integer(0x58); _sage_const_0xCF = Integer(0xCF); _sage_const_0xD0 = Integer(0xD0); _sage_const_0xEF = Integer(0xEF); _sage_const_0xAA = Integer(0xAA); _sage_const_0xFB = Integer(0xFB); _sage_const_0x43 = Integer(0x43); _sage_const_0x4D = Integer(0x4D); _sage_const_0x33 = Integer(0x33); _sage_const_0x85 = Integer(0x85); _sage_const_0x45 = Integer(0x45); _sage_const_0xF9 = Integer(0xF9); _sage_const_0x02 = Integer(0x02); _sage_const_0x7F = Integer(0x7F); _sage_const_0x50 = Integer(0x50); _sage_const_0x3C = Integer(0x3C); _sage_const_0x9F = Integer(0x9F); _sage_const_0xA8 = Integer(0xA8); _sage_const_0x51 = Integer(0x51); _sage_const_0xA3 = Integer(0xA3); _sage_const_0x40 = Integer(0x40); _sage_const_0x8F = Integer(0x8F); _sage_const_0x92 = Integer(0x92); _sage_const_0x9D = Integer(0x9D); _sage_const_0x38 = Integer(0x38); _sage_const_0xF5 = Integer(0xF5); _sage_const_0xBC = Integer(0xBC); _sage_const_0xB6 = Integer(0xB6); _sage_const_0xDA = Integer(0xDA); _sage_const_0x21 = Integer(0x21); _sage_const_0x10 = Integer(0x10); _sage_const_0xFF = Integer(0xFF); _sage_const_0xF3 = Integer(0xF3); _sage_const_0xD2 = Integer(0xD2); _sage_const_0xCD = Integer(0xCD); _sage_const_0x0C = Integer(0x0C); _sage_const_0x13 = Integer(0x13); _sage_const_0xEC = Integer(0xEC); _sage_const_0x5F = Integer(0x5F); _sage_const_0x97 = Integer(0x97); _sage_const_0x44 = Integer(0x44); _sage_const_0x17 = Integer(0x17); _sage_const_0xC4 = Integer(0xC4); _sage_const_0xA7 = Integer(0xA7); _sage_const_0x7E = Integer(0x7E); _sage_const_0x3D = Integer(0x3D); _sage_const_0x64 = Integer(0x64); _sage_const_0x5D = Integer(0x5D); _sage_const_0x19 = Integer(0x19); _sage_const_0x73 = Integer(0x73); _sage_const_0x60 = Integer(0x60); _sage_const_0x81 = Integer(0x81); _sage_const_0x4F = Integer(0x4F); _sage_const_0xDC = Integer(0xDC); _sage_const_0x22 = Integer(0x22); _sage_const_0x2A = Integer(0x2A); _sage_const_0x90 = Integer(0x90); _sage_const_0x88 = Integer(0x88); _sage_const_0x46 = Integer(0x46); _sage_const_0xEE = Integer(0xEE); _sage_const_0xB8 = Integer(0xB8); _sage_const_0x14 = Integer(0x14); _sage_const_0xDE = Integer(0xDE); _sage_const_0x5E = Integer(0x5E); _sage_const_0x0B = Integer(0x0B); _sage_const_0xDB = Integer(0xDB); _sage_const_0xE0 = Integer(0xE0); _sage_const_0x32 = Integer(0x32); _sage_const_0x3A = Integer(0x3A); _sage_const_0x0A = Integer(0x0A); _sage_const_0x49 = Integer(0x49); _sage_const_0x06 = Integer(0x06); _sage_const_0x24 = Integer(0x24); _sage_const_0x5C = Integer(0x5C); _sage_const_0xC2 = Integer(0xC2); _sage_const_0xD3 = Integer(0xD3); _sage_const_0xAC = Integer(0xAC); _sage_const_0x62 = Integer(0x62); _sage_const_0x91 = Integer(0x91); _sage_const_0x95 = Integer(0x95); _sage_const_0xE4 = Integer(0xE4); _sage_const_0x79 = Integer(0x79); _sage_const_0xE7 = Integer(0xE7); _sage_const_0xC8 = Integer(0xC8); _sage_const_0x37 = Integer(0x37); _sage_const_0x6D = Integer(0x6D); _sage_const_0x8D = Integer(0x8D); _sage_const_0xD5 = Integer(0xD5); _sage_const_0x4E = Integer(0x4E); _sage_const_0xA9 = Integer(0xA9); _sage_const_0x6C = Integer(0x6C); _sage_const_0x56 = Integer(0x56); _sage_const_0xF4 = Integer(0xF4); _sage_const_0xEA = Integer(0xEA); _sage_const_0x65 = Integer(0x65); _sage_const_0x7A = Integer(0x7A); _sage_const_0xAE = Integer(0xAE); _sage_const_0x08 = Integer(0x08); _sage_const_0xBA = Integer(0xBA); _sage_const_0x78 = Integer(0x78); _sage_const_0x25 = Integer(0x25); _sage_const_0x2E = Integer(0x2E); _sage_const_0x1C = Integer(0x1C); _sage_const_0xA6 = Integer(0xA6); _sage_const_0xB4 = Integer(0xB4); _sage_const_0xC6 = Integer(0xC6); _sage_const_0xE8 = Integer(0xE8); _sage_const_0xDD = Integer(0xDD); _sage_const_0x74 = Integer(0x74); _sage_const_0x1F = Integer(0x1F); _sage_const_0x4B = Integer(0x4B); _sage_const_0xBD = Integer(0xBD); _sage_const_0x8B = Integer(0x8B); _sage_const_0x8A = Integer(0x8A); _sage_const_0x70 = Integer(0x70); _sage_const_0x3E = Integer(0x3E); _sage_const_0xB5 = Integer(0xB5); _sage_const_0x66 = Integer(0x66); _sage_const_0x48 = Integer(0x48); _sage_const_0x03 = Integer(0x03); _sage_const_0xF6 = Integer(0xF6); _sage_const_0x0E = Integer(0x0E); _sage_const_0x61 = Integer(0x61); _sage_const_0x35 = Integer(0x35); _sage_const_0x57 = Integer(0x57); _sage_const_0xB9 = Integer(0xB9); _sage_const_0x86 = Integer(0x86); _sage_const_0xC1 = Integer(0xC1); _sage_const_0x1D = Integer(0x1D); _sage_const_0x9E = Integer(0x9E); _sage_const_0xE1 = Integer(0xE1); _sage_const_0xF8 = Integer(0xF8); _sage_const_0x98 = Integer(0x98); _sage_const_0x11 = Integer(0x11); _sage_const_0x69 = Integer(0x69); _sage_const_0xD9 = Integer(0xD9); _sage_const_0x8E = Integer(0x8E); _sage_const_0x94 = Integer(0x94); _sage_const_0x9B = Integer(0x9B); _sage_const_0x1E = Integer(0x1E); _sage_const_0x87 = Integer(0x87); _sage_const_0xE9 = Integer(0xE9); _sage_const_0xCE = Integer(0xCE); _sage_const_0x55 = Integer(0x55); _sage_const_0x28 = Integer(0x28); _sage_const_0xDF = Integer(0xDF); _sage_const_0x8C = Integer(0x8C); _sage_const_0xA1 = Integer(0xA1); _sage_const_0x89 = Integer(0x89); _sage_const_0x0D = Integer(0x0D); _sage_const_0xBF = Integer(0xBF); _sage_const_0xE6 = Integer(0xE6); _sage_const_0x42 = Integer(0x42); _sage_const_0x68 = Integer(0x68); _sage_const_0x41 = Integer(0x41); _sage_const_0x99 = Integer(0x99); _sage_const_0x2D = Integer(0x2D); _sage_const_0x0F = Integer(0x0F); _sage_const_0xB0 = Integer(0xB0); _sage_const_0x54 = Integer(0x54); _sage_const_0xBB = Integer(0xBB); _sage_const_0x16 = Integer(0x16); _sage_const_1 = Integer(1); _sage_const_8 = Integer(8); _sage_const_256 = Integer(256); _sage_const_0 = Integer(0); _sage_const_255 = Integer(255); _sage_const_2 = Integer(2)
import order

sbox = [
	_sage_const_0x63 , _sage_const_0x7C , _sage_const_0x77 , _sage_const_0x7B , _sage_const_0xF2 , _sage_const_0x6B , _sage_const_0x6F , _sage_const_0xC5 ,
	_sage_const_0x30 , _sage_const_0x01 , _sage_const_0x67 , _sage_const_0x2B , _sage_const_0xFE , _sage_const_0xD7 , _sage_const_0xAB , _sage_const_0x76 ,
	_sage_const_0xCA , _sage_const_0x82 , _sage_const_0xC9 , _sage_const_0x7D , _sage_const_0xFA , _sage_const_0x59 , _sage_const_0x47 , _sage_const_0xF0 ,
	_sage_const_0xAD , _sage_const_0xD4 , _sage_const_0xA2 , _sage_const_0xAF , _sage_const_0x9C , _sage_const_0xA4 , _sage_const_0x72 , _sage_const_0xC0 ,
	_sage_const_0xB7 , _sage_const_0xFD , _sage_const_0x93 , _sage_const_0x26 , _sage_const_0x36 , _sage_const_0x3F , _sage_const_0xF7 , _sage_const_0xCC ,
	_sage_const_0x34 , _sage_const_0xA5 , _sage_const_0xE5 , _sage_const_0xF1 , _sage_const_0x71 , _sage_const_0xD8 , _sage_const_0x31 , _sage_const_0x15 ,
	_sage_const_0x04 , _sage_const_0xC7 , _sage_const_0x23 , _sage_const_0xC3 , _sage_const_0x18 , _sage_const_0x96 , _sage_const_0x05 , _sage_const_0x9A ,
	_sage_const_0x07 , _sage_const_0x12 , _sage_const_0x80 , _sage_const_0xE2 , _sage_const_0xEB , _sage_const_0x27 , _sage_const_0xB2 , _sage_const_0x75 ,
	_sage_const_0x09 , _sage_const_0x83 , _sage_const_0x2C , _sage_const_0x1A , _sage_const_0x1B , _sage_const_0x6E , _sage_const_0x5A , _sage_const_0xA0 ,
	_sage_const_0x52 , _sage_const_0x3B , _sage_const_0xD6 , _sage_const_0xB3 , _sage_const_0x29 , _sage_const_0xE3 , _sage_const_0x2F , _sage_const_0x84 ,
	_sage_const_0x53 , _sage_const_0xD1 , _sage_const_0x00 , _sage_const_0xED , _sage_const_0x20 , _sage_const_0xFC , _sage_const_0xB1 , _sage_const_0x5B ,
	_sage_const_0x6A , _sage_const_0xCB , _sage_const_0xBE , _sage_const_0x39 , _sage_const_0x4A , _sage_const_0x4C , _sage_const_0x58 , _sage_const_0xCF ,
	_sage_const_0xD0 , _sage_const_0xEF , _sage_const_0xAA , _sage_const_0xFB , _sage_const_0x43 , _sage_const_0x4D , _sage_const_0x33 , _sage_const_0x85 ,
	_sage_const_0x45 , _sage_const_0xF9 , _sage_const_0x02 , _sage_const_0x7F , _sage_const_0x50 , _sage_const_0x3C , _sage_const_0x9F , _sage_const_0xA8 ,
	_sage_const_0x51 , _sage_const_0xA3 , _sage_const_0x40 , _sage_const_0x8F , _sage_const_0x92 , _sage_const_0x9D , _sage_const_0x38 , _sage_const_0xF5 ,
	_sage_const_0xBC , _sage_const_0xB6 , _sage_const_0xDA , _sage_const_0x21 , _sage_const_0x10 , _sage_const_0xFF , _sage_const_0xF3 , _sage_const_0xD2 ,
	_sage_const_0xCD , _sage_const_0x0C , _sage_const_0x13 , _sage_const_0xEC , _sage_const_0x5F , _sage_const_0x97 , _sage_const_0x44 , _sage_const_0x17 ,
	_sage_const_0xC4 , _sage_const_0xA7 , _sage_const_0x7E , _sage_const_0x3D , _sage_const_0x64 , _sage_const_0x5D , _sage_const_0x19 , _sage_const_0x73 ,
	_sage_const_0x60 , _sage_const_0x81 , _sage_const_0x4F , _sage_const_0xDC , _sage_const_0x22 , _sage_const_0x2A , _sage_const_0x90 , _sage_const_0x88 ,
	_sage_const_0x46 , _sage_const_0xEE , _sage_const_0xB8 , _sage_const_0x14 , _sage_const_0xDE , _sage_const_0x5E , _sage_const_0x0B , _sage_const_0xDB ,
	_sage_const_0xE0 , _sage_const_0x32 , _sage_const_0x3A , _sage_const_0x0A , _sage_const_0x49 , _sage_const_0x06 , _sage_const_0x24 , _sage_const_0x5C ,
	_sage_const_0xC2 , _sage_const_0xD3 , _sage_const_0xAC , _sage_const_0x62 , _sage_const_0x91 , _sage_const_0x95 , _sage_const_0xE4 , _sage_const_0x79 ,
	_sage_const_0xE7 , _sage_const_0xC8 , _sage_const_0x37 , _sage_const_0x6D , _sage_const_0x8D , _sage_const_0xD5 , _sage_const_0x4E , _sage_const_0xA9 ,
	_sage_const_0x6C , _sage_const_0x56 , _sage_const_0xF4 , _sage_const_0xEA , _sage_const_0x65 , _sage_const_0x7A , _sage_const_0xAE , _sage_const_0x08 ,
	_sage_const_0xBA , _sage_const_0x78 , _sage_const_0x25 , _sage_const_0x2E , _sage_const_0x1C , _sage_const_0xA6 , _sage_const_0xB4 , _sage_const_0xC6 ,
	_sage_const_0xE8 , _sage_const_0xDD , _sage_const_0x74 , _sage_const_0x1F , _sage_const_0x4B , _sage_const_0xBD , _sage_const_0x8B , _sage_const_0x8A ,
	_sage_const_0x70 , _sage_const_0x3E , _sage_const_0xB5 , _sage_const_0x66 , _sage_const_0x48 , _sage_const_0x03 , _sage_const_0xF6 , _sage_const_0x0E ,
	_sage_const_0x61 , _sage_const_0x35 , _sage_const_0x57 , _sage_const_0xB9 , _sage_const_0x86 , _sage_const_0xC1 , _sage_const_0x1D , _sage_const_0x9E ,
	_sage_const_0xE1 , _sage_const_0xF8 , _sage_const_0x98 , _sage_const_0x11 , _sage_const_0x69 , _sage_const_0xD9 , _sage_const_0x8E , _sage_const_0x94 ,
	_sage_const_0x9B , _sage_const_0x1E , _sage_const_0x87 , _sage_const_0xE9 , _sage_const_0xCE , _sage_const_0x55 , _sage_const_0x28 , _sage_const_0xDF ,
	_sage_const_0x8C , _sage_const_0xA1 , _sage_const_0x89 , _sage_const_0x0D , _sage_const_0xBF , _sage_const_0xE6 , _sage_const_0x42 , _sage_const_0x68 ,
	_sage_const_0x41 , _sage_const_0x99 , _sage_const_0x2D , _sage_const_0x0F , _sage_const_0xB0 , _sage_const_0x54 , _sage_const_0xBB , _sage_const_0x16 
]

bit_indexes = [[(num >> bit) & _sage_const_1  for bit in range(_sage_const_8 )] for num in range(_sage_const_256 )]
bit_sboxes = [[(sbox[num] >> bit) & _sage_const_1  for bit in range(_sage_const_8 )] for num in range(_sage_const_256 )]
sbox_polys = []
coefficients_dict = {}


def make_monomial_coefficient():
    R = PolynomialRing(QQ, 'x', _sage_const_8 )  # 生成一个多项式环, x0 到 x7
    x = R.gens()  # 获取生成元, 即变量 x0 到 x7
    for bit in range(_sage_const_8 ):
        polynomial_total = []  # 初始化结果列表
        for i in range(_sage_const_256 ):
            # 根据bit_indexes[i][0] 初始化 poly
            poly = x[_sage_const_0 ] if bit_indexes[i][_sage_const_0 ] == _sage_const_1  else (_sage_const_1  - x[_sage_const_0 ])
            # 循环处理剩余的二进制位
            for j in range(_sage_const_1 , _sage_const_8 ):
                # 根据 bit_indexes[i][j] 选择 x[j] 或 (1-x[j]) 加入到当前多项式
                poly *= x[j] if bit_indexes[i][j] == _sage_const_1  else (_sage_const_1  - x[j])
            poly *= bit_sboxes[i][bit]
            # poly *= sbox[i]
            # 将构建的多项式添加到结果列表
            polynomial_total.append(poly)
        for i in range(_sage_const_1 , _sage_const_256 ):
            polynomial_total[_sage_const_0 ] += polynomial_total[i]
        sbox_polys.append(polynomial_total[_sage_const_0 ])
    return x

def make_all_monomial():
    R = PolynomialRing(QQ, 'x', _sage_const_8 )  # 生成一个多项式环, x0 到 x7
    x = R.gens()  # 获取生成元, 即变量 x0 到 x7
    for i in range(_sage_const_256 ):
        poly = x[_sage_const_0 ] if bit_indexes[i][_sage_const_0 ] == _sage_const_1  else _sage_const_1 
        for j in range(_sage_const_1 , _sage_const_8 ):
            poly *= x[j] if bit_indexes[i][j] == _sage_const_1  else _sage_const_1 
        coefficients_dict[ poly ] = _sage_const_0 


# 调用函数
x = make_monomial_coefficient()
make_all_monomial()


for i in range(_sage_const_8 ):
    print("monomial number is:", len( sbox_polys[i].monomials()) )
    for monomial in sbox_polys[i].monomials():
        coeff = sbox_polys[i].monomial_coefficient(monomial)
        coefficients_dict[monomial] += coeff

        # print(f"{coeff} * {monomial}")

# 现在，我们可以找到所有系数为零的单项式
zero_coefficients_monomials = [monomial for monomial, coeff in coefficients_dict.items() if coeff == _sage_const_0 ]

# 打印系数为零的单项式
# print("Monomials with zero coefficient:")
# for monomial in zero_coefficients_monomials:
#     print(monomial)

# 打印所有单项式的系数->C++ format
coefficient_ordered = []

file_name = 'sbox_coeff.txt'
with open(file_name, 'w') as file:
    file.write('# Sbox monomial coefficient is as follows\n')

    R = PolynomialRing(QQ, 'x', _sage_const_8 )  # 生成一个多项式环, x0 到 x7
    x = R.gens()  # 获取生成元, 即变量 x0 到 x7
    for i in range(_sage_const_8 ):
        c_str = f'static int sbox_{i}[255] = {{ '
        file.write(c_str)
        poly_coeff = []
        for j in range(_sage_const_1 , _sage_const_256 ):
            poly = x[_sage_const_0 ] if bit_indexes[j][_sage_const_0 ] == _sage_const_1  else _sage_const_1 
            for k in range(_sage_const_1 , _sage_const_8 ):
                poly *= x[k] if bit_indexes[j][k] == _sage_const_1  else _sage_const_1 
            # 获取系数
            coeff = sbox_polys[i].monomial_coefficient(poly)
            poly_coeff.append(coeff)
            # 写入系数和多项式到文件
            if j < _sage_const_255 :  # 最后一个元素后不加逗号
                file.write(f"\n {coeff},    //{j}: {poly}")
            else:
                file.write(f"\n{coeff}    //{j}: {poly}\n")
        coefficient_ordered.append(poly_coeff)
        file.write('};\n\n')

print("coeff ordered: ", coefficient_ordered)
# 定义变量
x = var('x0 x1 x2 x3 x4 x5 x6 x7')
# x = var('x0 x1 x2 x3')


# 定义组合函数
def combine(group1, group2):
    result = []
    for g1 in group1:
        for g2 in group2:
            result.append(g1 * g2)
    return result

# 定义基于层次的分组函数
def layered_combine(variables):
    assert len(variables) % _sage_const_2  == _sage_const_0 , "变量数量应为偶数"

    if len(variables) == _sage_const_2 :
        # 返回变量本身以及它们的乘积
        return [variables[_sage_const_0 ], variables[_sage_const_1 ], variables[_sage_const_0 ]*variables[_sage_const_1 ]]
    
    mid = len(variables) // _sage_const_2 
    left = layered_combine(variables[:mid])
    right = layered_combine(variables[mid:])
    tmp = combine(left, right) + left + right

    # 组合左右两边的结果
    return combine(left, right) + left + right

def sub_byte( _all_monomials, _monomial_order, _assignment, bit_pos ):
    result = bit_sboxes[_sage_const_0 ][bit_pos]
    print(hex(result))
    # 使用 subs 替换变量
    for i in range( _sage_const_0 , len( _all_monomials ) ):
        ind = _monomial_order[i]-_sage_const_1 
        # print("coeff: ", coefficient_ordered[bit_pos][ind])
        # print(ind)
        result += coefficient_ordered[bit_pos][ind] * _all_monomials[i].subs(_assignment) 
    print(f"final result{bit_pos}: ", hex(result))



# 调用函数生成所有单项式
all_monomials = layered_combine(x)


bitset = []
for i in range(_sage_const_8 ):
    bitset.append(_sage_const_1 <<i)

monomial_order = order.layered_combine_bin(bitset)

assignment = {xi: value for xi, value in zip(x, [_sage_const_1 , _sage_const_1 , _sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_0 , _sage_const_0 ])}

print("bitsbox[0]: ", bit_sboxes[_sage_const_0 ])

for i in range(_sage_const_8 ):
    bit_sboxes[_sage_const_0 ][i]
    sub_byte(all_monomials, monomial_order, assignment, i)


# #打印所有单项式
# print(f"Total number of monomials: {len(all_monomials)}")
# for i in range( len(all_monomials) ):
#     print( "number:", monomial_order[i], all_monomials[i])

